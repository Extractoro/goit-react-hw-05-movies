{"version":3,"file":"static/js/cast.f78f23c4.chunk.js","mappings":"4QAkBMA,EAAUC,EAAAA,GAAAA,IAAH,sFAMPC,EAAQD,EAAAA,GAAAA,IAAH,+CAILE,EAAUF,EAAAA,GAAAA,IAAH,wGAOPG,EAAQH,EAAAA,GAAAA,GAAH,wIASLI,EAAWJ,EAAAA,GAAAA,EAAH,yHAQd,EAjDiB,SAAC,GAAgC,IAA9BK,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACnC,OACE,UAACR,EAAD,WACGQ,GACC,SAACN,EAAD,CAAOO,IAAG,yCAAoCD,GAASE,IAAKJ,KAE5D,SAACH,EAAD,CAASM,IAAKE,EAASD,IAAKJ,KAG9B,SAACF,EAAD,UAAQE,KACR,SAACD,EAAD,UAAWE,QCuBXK,EAAOX,EAAAA,GAAAA,GAAH,yPAMY,SAAAY,GAAC,OAAIA,EAAEC,MAAMC,aAQ7BC,EAAOf,EAAAA,GAAAA,GAAH,yCAIV,EA/Ca,WACX,OAAwBgB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUH,GAASI,MAAK,SAAAC,GACtBN,EAAmBM,ECZlBP,KAAKQ,KAAI,SAAAC,GAAI,MAAK,CACrBC,GAAID,EAAKC,GACTtB,KAAMqB,EAAKE,cACXtB,UAAWoB,EAAKpB,UAChBC,MAAOmB,EAAKG,uBDUX,CAACV,KAGF,SAACR,EAAD,UACGM,EAAKa,OAAS,EACbb,EAAKQ,KAAI,SAAAC,GAAI,OACX,SAACX,EAAD,WACE,SAAC,EAAD,CACEV,KAAMqB,EAAKrB,KACXC,UAAWoB,EAAKpB,UAChBC,MAAOmB,EAAKnB,SAJLmB,EAAKC,QASlB,+C,qME3BFI,G,OAAW,gCACXC,EAAU,mCAEHC,EAAQ,mCAAG,sGAEdC,EAFc,UAELH,EAFK,uCAEkCC,GAFlC,SAGGG,MAAMD,GAHT,cAGdE,EAHc,yBAIbA,EAASC,QAJI,gCAMpBC,EAAAA,OAAAA,QAAe,2BACd,KAPmB,yDAAH,qDAWRC,EAAY,mCAAG,WAAMZ,GAAN,yFAElBO,EAFkB,UAETH,EAFS,kBAESJ,EAFT,oBAEuBK,EAFvB,4BAGDG,MAAMD,GAHL,cAGlBE,EAHkB,yBAIjBA,EAASC,QAJQ,gCAMvB,KANuB,yDAAH,sDAUZf,EAAS,mCAAG,WAAMK,GAAN,yFAEfO,EAFe,UAENH,EAFM,kBAEYJ,EAFZ,4BAEkCK,EAFlC,4BAGEG,MAAMD,GAHR,cAGfE,EAHe,yBAIdA,EAASC,QAJK,gCAMrBC,EAAAA,OAAAA,QAAe,2BANM,yDAAH,sDAUTE,EAAY,mCAAG,WAAMb,GAAN,yFAElBO,EAFkB,UAETH,EAFS,kBAESJ,EAFT,4BAE+BK,EAF/B,mCAGDG,MAAMD,GAHL,cAGlBE,EAHkB,yBAIjBA,EAASC,QAJQ,gCAMxBC,EAAAA,OAAAA,QAAe,2BANS,yDAAH,sDAUZG,EAAW,mCAAG,WAAMC,GAAN,2FAEjBC,EAAe,IAAIC,gBAAgB,CACvCC,QAAS,mCACTH,MAAOA,EACPI,SAAU,QACVC,eAAe,IAEXb,EARiB,UAQRH,EARQ,yBAQiBY,GARjB,SASAR,MAAMD,GATN,cASjBE,EATiB,yBAUhBA,EAASC,QAVO,gCAYvBC,EAAAA,OAAAA,QAAe,2BAZQ,yDAAH,uD","sources":["components/Cast/CastItem/CastItem.jsx","components/Cast/Cast.jsx","utils/mappedCast.js","services/fetchApi.jsx"],"sourcesContent":["import noPhoto from './nophoto.jpg';\nimport styled from 'styled-components';\n\nconst CastItem = ({ name, character, photo }) => {\n  return (\n    <Wrapper>\n      {photo ? (\n        <Photo src={`https://themoviedb.org/t/p/w342${photo}`} alt={name} />\n      ) : (\n        <NoPhoto src={noPhoto} alt={name} />\n      )}\n\n      <Title>{name}</Title>\n      <Subtitle>{character}</Subtitle>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 124px;\n`;\n\nconst Photo = styled.img`\n  border-radius: 5px;\n`;\n\nconst NoPhoto = styled.img`\n  width: 124px;\n  height: 186px;\n  object-fit: cover;\n  border-radius: 5px;\n`;\n\nconst Title = styled.h4`\n  margin-top: 5px;\n  padding: 0 2px;\n  color: #ffa600;\n  margin: 0;\n  margin-top: 5px;\n  font-size: 14px;\n`;\n\nconst Subtitle = styled.p`\n  margin-top: 5px;\n  padding: 0 2px;\n  color: #000;\n  font-size: 13px;\n  font-weight: bold;\n`;\n\nexport default CastItem;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { fetchCast } from 'services/fetchApi';\nimport { mappedCast } from 'utils/mappedCast';\nimport CastItem from './CastItem/CastItem';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchCast(movieId).then(data => {\n      setCast(mappedCast(data));\n    });\n  }, [movieId]);\n\n  return (\n    <List>\n      {cast.length > 0 ? (\n        cast.map(item => (\n          <Item key={item.id}>\n            <CastItem\n              name={item.name}\n              character={item.character}\n              photo={item.photo}\n            />\n          </Item>\n        ))\n      ) : (\n        <h3>No information</h3>\n      )}\n    </List>\n  );\n};\n\nconst List = styled.ul`\n  display: flex;\n  list-style: none;\n  justify-content: center;\n  flex-wrap: wrap;\n  padding: 11px;\n  background-color: ${p => p.theme.mainColor};\n  border-radius: 10px;\n  & .noCredits {\n    margin-right: auto;\n    font-size: 20px;\n  }\n`;\n\nconst Item = styled.li`\n  padding: 8px;\n`;\n\nexport default Cast;\n","export const mappedCast = list =>\n  list.cast.map(item => ({\n    id: item.id,\n    name: item.original_name,\n    character: item.character,\n    photo: item.profile_path,\n  }));\n","// import NotFoundPage from 'components/NotFound/NotFoundPage';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Navigate } from 'react-router-dom';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1f2231d799563a30b24b357a44da2aa2';\n\nexport const fetchApi = async () => {\n  try {\n    const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n    const response = await fetch(url);\n    return response.json();\n  } catch (error) {\n    Notify.failure('Oops, an error occurred');\n    <Navigate to=\"/\" replace={true} />;\n  }\n};\n\nexport const fetchDetails = async id => {\n  try {\n    const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`;\n    const response = await fetch(url);\n    return response.json();\n  } catch (error) {\n    <Navigate to=\"/\" replace={true} />;\n  }\n};\n\nexport const fetchCast = async id => {\n  try {\n    const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await fetch(url);\n    return response.json();\n  } catch (error) {\n    Notify.failure('Oops, an error occurred');\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n    const response = await fetch(url);\n    return response.json();\n  } catch (error) {\n    Notify.failure('Oops, an error occurred');\n  }\n};\n\nexport const fetchSearch = async query => {\n  try {\n    const searchParams = new URLSearchParams({\n      api_key: '1f2231d799563a30b24b357a44da2aa2',\n      query: query,\n      language: 'en-US',\n      include_adult: false,\n    });\n    const url = `${BASE_URL}/search/movie?${searchParams}`;\n    const response = await fetch(url);\n    return response.json();\n  } catch (error) {\n    Notify.failure('Oops, an error occurred');\n  }\n};\n"],"names":["Wrapper","styled","Photo","NoPhoto","Title","Subtitle","name","character","photo","src","alt","noPhoto","List","p","theme","mainColor","Item","useState","cast","setCast","movieId","useParams","useEffect","fetchCast","then","data","map","item","id","original_name","profile_path","length","BASE_URL","API_KEY","fetchApi","url","fetch","response","json","Notify","fetchDetails","fetchReviews","fetchSearch","query","searchParams","URLSearchParams","api_key","language","include_adult"],"sourceRoot":""}